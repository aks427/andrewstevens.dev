{"componentChunkName":"component---src-templates-post-js","path":"/posts/azure-devops-templates/","result":{"data":{"markdownRemark":{"html":"<p>I recently migrated a CI/CD pipeline from TeamCity and Octopus Deploy to Azure DevOps (AzDo) . We have a mostly micro-services architecture where almost all of the services were in one GitHub repository. I say “mostly” because we’re near the finish line of using the <a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">strangler pattern</a> to gradually migrate away from the previous monolithic architecture.</p>\n<p>My goals were:</p>\n<ul>\n<li>Each service has its own GitHub repository</li>\n<li>\n<p>Every pull request is validated before merging to the master branch. For us this means:</p>\n<ul>\n<li>It builds</li>\n<li>All tests pass</li>\n<li>PR title contains related JIRA issue key for tracking</li>\n</ul>\n</li>\n<li>All changes in master and release branches are automatically built and deployed</li>\n<li>Minimal configuration needed for each service</li>\n</ul>\n<p>I started out simply by adding an azure-pipelines.yml file that looked like this to each repository:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> 1.0$(Rev<span class=\"token punctuation\">:</span>.r)\n\n<span class=\"token key atrule\">trigger</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> master\n  <span class=\"token punctuation\">-</span> release<span class=\"token punctuation\">-</span>*\n\n<span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> DotNetCoreCLI@2\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Restore nugets\"</span>\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> restore\n      <span class=\"token key atrule\">projects</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"**/*.csproj\"</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> DotNetCoreCLI@2\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Run tests\"</span>\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test\"</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> DotNetCoreCLI@2\n    <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> and(succeeded()<span class=\"token punctuation\">,</span> ne(variables<span class=\"token punctuation\">[</span><span class=\"token string\">'Build.Reason'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> 'PullRequest'))\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"dotnet publish\"</span>\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> publish\n      <span class=\"token key atrule\">publishWebProjects</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n      <span class=\"token key atrule\">projects</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"**/*.csproj\"</span>\n      <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"--configuration Release --output $(Build.ArtifactStagingDirectory)\"</span>\n      <span class=\"token key atrule\">zipAfterPublish</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> PublishBuildArtifacts@1\n    <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> and(succeeded()<span class=\"token punctuation\">,</span> ne(variables<span class=\"token punctuation\">[</span><span class=\"token string\">'Build.Reason'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> 'PullRequest'))</code></pre></div>\n<p>This worked, but it didn’t validate the PR name, and it is also is a lot of code duplication. The solution I chose for this was to use shared AzDo template yaml files.</p>\n<p>Steps from a template can be included like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> build.yml</code></pre></div>\n<p>Since we have moved every service to its own repository, I created a separate repository named <code class=\"language-text\">devops-templates</code>. Templates from another repository can be referenced by adding this above where the template is referenced:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">repositories</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> templates\n      <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> github\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> yourOrgName/devops<span class=\"token punctuation\">-</span>templates\n      <span class=\"token key atrule\">endpoint</span><span class=\"token punctuation\">:</span> YourGitHubServiceConnection</code></pre></div>\n<p>We will also need to adjust where we use the template to include <code class=\"language-text\">@templates</code> after the template filename.</p>\n<p>The azure-pipelines.yml file now looks like the code below. <code class=\"language-text\">GithubToken</code> is a secure AzDo variable that contains a <a href=\"https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub personal access token</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> 1.0$(Rev<span class=\"token punctuation\">:</span>.r)\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">repositories</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> templates\n      <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> github\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> yourOrgName/devops<span class=\"token punctuation\">-</span>templates\n      <span class=\"token key atrule\">endpoint</span><span class=\"token punctuation\">:</span> YourGitHubServiceConnection\n\n<span class=\"token key atrule\">trigger</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> master\n  <span class=\"token punctuation\">-</span> release<span class=\"token punctuation\">-</span>*\n\n<span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> build.yml@templates\n    <span class=\"token key atrule\">parameters</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">GithubToken</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"$(GithubToken)\"</span></code></pre></div>\n<p>The <code class=\"language-text\">build.yml</code> file in the <code class=\"language-text\">devops-templates</code> repository looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">parameters</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">GithubToken</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n  <span class=\"token key atrule\">runTests</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">workingDirectory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> pr<span class=\"token punctuation\">-</span>validation.yml\n    <span class=\"token key atrule\">parameters</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">GithubToken</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${{ parameters.GithubToken }}\"</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> DotNetCoreCLI@2\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Restore nugets\"</span>\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"restore\"</span>\n      <span class=\"token key atrule\">projects</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"**/*.csproj\"</span>\n\n  <span class=\"token punctuation\">-</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> if eq(parameters.runTests<span class=\"token punctuation\">,</span> true) <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> DotNetCoreCLI@2\n        <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Run tests\"</span>\n        <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"test\"</span>\n          <span class=\"token key atrule\">workingDirectory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${{ parameters.workingDirectory }}\"</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> DotNetCoreCLI@2\n    <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> and(succeeded()<span class=\"token punctuation\">,</span> ne(variables<span class=\"token punctuation\">[</span><span class=\"token string\">'Build.Reason'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> 'PullRequest'))\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"dotnet publish\"</span>\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> publish\n      <span class=\"token key atrule\">publishWebProjects</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n      <span class=\"token key atrule\">projects</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"**/*.csproj\"</span>\n      <span class=\"token key atrule\">arguments</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"--configuration Release --output $(Build.ArtifactStagingDirectory)\"</span>\n      <span class=\"token key atrule\">zipAfterPublish</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> PublishBuildArtifacts@1\n    <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> and(succeeded()<span class=\"token punctuation\">,</span> ne(variables<span class=\"token punctuation\">[</span><span class=\"token string\">'Build.Reason'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> 'PullRequest'))</code></pre></div>\n<p>There is another template named <code class=\"language-text\">pr-validation.yml</code> that handles our PR title checks.</p>\n<p>Line 78 has the regex for matching on the PR title. In this example it would match on any of the following text.</p>\n<ul>\n<li>AB-123456</li>\n<li>CD-134</li>\n<li>[skip-jira]</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre style=\"counter-reset: linenumber 0\" class=\"language-yaml line-numbers\"><code class=\"language-yaml\"><span class=\"token key atrule\">parameters</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">GithubToken</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n\n<span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">task</span><span class=\"token punctuation\">:</span> PowerShell@2\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">targetType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"inline\"</span>\n      <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        function Process-Failure {\n            param(\n                [PSCustomObject]\n                $Data,\n                [System.Text.RegularExpressions.MatchCollection]   \n                $RegexMatches\n            )</span>\n\n            $reason = \"No JIRA issue detected.\"\n            Write<span class=\"token punctuation\">-</span>Host $reason\n            Write<span class=\"token punctuation\">-</span>Host \"JIRA issue must be in title for pull request.\"\n            Write<span class=\"token punctuation\">-</span>Host \"<span class=\"token comment\">##vso[task.logissue type=error;]$reason\"</span>\n            Write<span class=\"token punctuation\">-</span>Host \"<span class=\"token comment\">##vso[task.complete result=Failed;]\"</span>\n            Write<span class=\"token punctuation\">-</span>Error \"FAILED FOR LACK OF JIRA ISSUE.\"\n            Exit 1\n        <span class=\"token punctuation\">}</span>\n\n        function Process<span class=\"token punctuation\">-</span>Success <span class=\"token punctuation\">{</span>\n            param(\n                <span class=\"token punctuation\">[</span>PSCustomObject<span class=\"token punctuation\">]</span>\n                $Data<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span>System.Text.RegularExpressions.MatchCollection<span class=\"token punctuation\">]</span>   \n                $RegexMatches\n            )\n\n            Write<span class=\"token punctuation\">-</span>Host \"Jira issues detected<span class=\"token tag\">!</span>\"\n\n            foreach ($match in $RegexMatches) <span class=\"token punctuation\">{</span>\n                Write<span class=\"token punctuation\">-</span>Host $match.Value\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        function Get<span class=\"token punctuation\">-</span>GitPullRequest <span class=\"token punctuation\">{</span>\n            param($PullRequest<span class=\"token punctuation\">,</span> $GithubToken)\n\n            $auth = \"Bearer $GithubToken\"\n            $headers = @<span class=\"token punctuation\">{</span>\n                'Authorization' = $auth\n            <span class=\"token punctuation\">}</span>\n\n            $repoUri = \"$(System.PullRequest.SourceRepositoryURI)\"\n            $repoUri = $repoUri.replace(\".git\"<span class=\"token punctuation\">,</span> \"\")\n            $gitOrg = $repoUri.split(\"/\")<span class=\"token punctuation\">[</span><span class=\"token number\">-2</span><span class=\"token punctuation\">]</span>\n            $gitRepo = $repoUri.split(\"/\")<span class=\"token punctuation\">[</span><span class=\"token number\">-1</span><span class=\"token punctuation\">]</span>\n            $gitBaseUrl = \"https<span class=\"token punctuation\">:</span>//api.github.com/repos/\" + $gitOrg + \"/\" + $gitRepo\n            $pullRequestPath = \"/pulls/\"\n            $url = $gitBaseUrl + $pullRequestPath + $PullRequest\n\n            Write<span class=\"token punctuation\">-</span>Host \"Attempting to get $PulRequest from $url\"\n            try <span class=\"token punctuation\">{</span>\n                $pullRequestData = Invoke<span class=\"token punctuation\">-</span>RestMethod <span class=\"token punctuation\">-</span>Uri $url <span class=\"token punctuation\">-</span>Headers $headers\n                Write<span class=\"token punctuation\">-</span>Host \"Data successfully retrieved\"\n            <span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">{</span>\n                $desc = $_.Exception.Response.StatusDescription\n                $msg = \"Error in web request <span class=\"token punctuation\">-</span> $desc\"\n                Write<span class=\"token punctuation\">-</span>Host \"<span class=\"token comment\">##vso[task.logissue type=error;]$msg\"</span>\n                Write<span class=\"token punctuation\">-</span>Error $msg\n                Write<span class=\"token punctuation\">-</span>Host \"<span class=\"token comment\">##vso[task.complete result=Failed;]\"</span>\n                Exit 1\n            <span class=\"token punctuation\">}</span>\n            return $pullRequestData\n\n        <span class=\"token punctuation\">}</span>\n\n        function Process<span class=\"token punctuation\">-</span>PullRequestData <span class=\"token punctuation\">{</span>\n            param($PullRequestData)\n            \n            $msg = $PullRequestData.title\n            <span class=\"token key atrule\">Write-Host \"Parsing pull request title</span><span class=\"token punctuation\">:</span> $msg\"\n            $issueRegex = <span class=\"token punctuation\">[</span>regex<span class=\"token punctuation\">]</span> \"((AB<span class=\"token punctuation\">|</span>CD)<span class=\"token punctuation\">-</span>\\d<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span>)<span class=\"token punctuation\">|</span>(\\<span class=\"token punctuation\">[</span>skip\\<span class=\"token punctuation\">-</span>jira\\<span class=\"token punctuation\">]</span>)\"\n            $matches = $issueRegex.Matches($msg)\n            If ($matches.Count <span class=\"token punctuation\">-</span>eq 0) <span class=\"token punctuation\">{</span>Process<span class=\"token punctuation\">-</span>Failure <span class=\"token punctuation\">-</span>Data $PullRequestData <span class=\"token punctuation\">-</span>RegexMatches $matches <span class=\"token punctuation\">}</span>\n            ElseIF ($matches.Count <span class=\"token punctuation\">-</span>gt 0) <span class=\"token punctuation\">{</span>Process<span class=\"token punctuation\">-</span>Success <span class=\"token punctuation\">-</span>Data $PullRequestData <span class=\"token punctuation\">-</span>RegexMatches $matches<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n\n        function Parse<span class=\"token punctuation\">-</span>PullRequestForJiraTicket <span class=\"token punctuation\">{</span>\n             param(\n                <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>\n                $PullRequest<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">]</span>\n                $GithubToken\n            )\n\n            $pullRequestData = Get<span class=\"token punctuation\">-</span>GitPullRequest <span class=\"token punctuation\">-</span>GithubToken $GithubToken <span class=\"token punctuation\">-</span>PullRequest $PullRequest\n            Process<span class=\"token punctuation\">-</span>PullRequestData <span class=\"token punctuation\">-</span>PullRequestData $pullRequestData\n        <span class=\"token punctuation\">}</span>\n\n        Parse<span class=\"token punctuation\">-</span>PullRequestForJiraTicket <span class=\"token punctuation\">-</span>PullRequest $(System.PullRequest.PullRequestNumber) <span class=\"token punctuation\">-</span>GithubToken $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> parameters.GithubToken <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">displayName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Check for JIRA issue in PR title\"</span>\n    <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> and(succeeded()<span class=\"token punctuation\">,</span> eq(variables<span class=\"token punctuation\">[</span><span class=\"token string\">'Build.Reason'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> 'PullRequest'))</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>With AzDo templates it makes it very simple to configure new services, but more importantly, it makes maintenance much easier.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops</a></li>\n<li><a href=\"https://confluence.atlassian.com/adminjiracloud/connect-jira-cloud-to-github-814188429.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://confluence.atlassian.com/adminjiracloud/connect-jira-cloud-to-github-814188429.html</a></li>\n</ul>","timeToRead":4,"frontmatter":{"title":"Azure DevOps Templates","date":"28 December, 2019"}}},"pageContext":{"slug":"/posts/azure-devops-templates/"}},"staticQueryHashes":["3159585216"]}