{"componentChunkName":"component---src-templates-post-js","path":"/posts/dependency-injection-durable-task/","result":{"data":{"markdownRemark":{"html":"<p>When using <a href=\"https://github.com/Azure/durabletask\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Durable Task Framework</a> it’s important to be able to use dependency injection in Task Orchestrations and Task Activities.</p>\n<p>When calling AddTaskOrchestrations() or AddTaskActivities(), you typically would pass in the Type of Orchestration or Activity that the framework will create when it runs. The key to using dependency injection is to use the overload that accepts an ObjectCreator.</p>\n<p>Here is an ObjectCreator that uses the built in .NET Core dependency injection.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">DurableTask<span class=\"token punctuation\">.</span>Core</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ExampleApp</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceProviderObjectCreator<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ObjectCreator<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Type</span> prototype<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IServiceProvider</span> serviceProvider<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">ServiceProviderObjectCreator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IServiceProvider</span> serviceProvider<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceProvider <span class=\"token operator\">=</span> serviceProvider<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">T</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>serviceProvider<span class=\"token punctuation\">.</span><span class=\"token function\">GetService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> obj<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Name <span class=\"token operator\">=</span> NameVersionHelper<span class=\"token punctuation\">.</span><span class=\"token function\">GetDefaultName</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Version <span class=\"token operator\">=</span> NameVersionHelper<span class=\"token punctuation\">.</span><span class=\"token function\">GetDefaultVersion</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Previously you would have something that looks similar to this to add all your Orchestrations and Activities:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">await</span> taskHubWorker\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddTaskOrchestrations</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">YourOrchestration</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddTaskActivities</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">YourActivity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">StartAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You can modify it by passing in an instance of ServiceProviderObjectCreator instead of the Type. The constructor for ServiceProviderObjectCreator takes the Type and an instance of IServiceProvider. IServiceProvider can be injected anywhere to get the instance for the current scope.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">await</span> taskHubWorker\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddTaskOrchestrations</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceProviderObjectCreator<span class=\"token punctuation\">&lt;</span>TaskOrchestration<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">YourOrchestration</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> serviceProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddTaskActivities</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceProviderObjectCreator<span class=\"token punctuation\">&lt;</span>TaskActivity<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">YourActivity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> serviceProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">StartAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You’ll also need to configure your Orchestrations and Activities where you configure your other services.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">services\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddTransient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">YourOrchestration</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddTransient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">YourActivity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Make sure to use the Transient lifetime so that Durable Task Framework can get a new instance each time it calls <code class=\"language-text\">Create()</code> on the ObjectCreator.</p>\n<p>Now you can use normal constructor injection in your Task Orchestrations and Task Activities.</p>","timeToRead":2,"frontmatter":{"title":"Dependency Injection with Durable Task Framework","date":"19 January, 2020"}}},"pageContext":{"slug":"/posts/dependency-injection-durable-task/"}},"staticQueryHashes":["3159585216"]}